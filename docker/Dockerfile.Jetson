# Deepstream builds require source code to be placed in the sample_apps folder.
# Define an argument for this so we can reference it without copy and paste
ARG container_build_path=/opt/nvidia/deepstream/deepstream-6.0/sources/apps/sample_apps/deepstream-nvdsanalytics-docker 

# Use the samples container for deepstream-l4t as our base container.
# It would be possible to use a multi-stage build which would use a container
# to build with build dependencies and other container based on the -base
# deepstream container for deployment which only had runtime dependencies.
# However, to keep things simple, we'll just use the samples container for 
# both build and deployment
FROM nvcr.io/nvidia/deepstream-l4t:6.0.1-samples
ARG container_build_path

# These are both runtime and build time dependencies
# unzip is needed to unzip the model at runtime, all others
# are only needed in the build container. Also include additional GStreamer plugins.
RUN apt-get update && apt-get install -y build-essential \
        libgstreamer1.0-dev \
        libgstrtspserver-1.0-dev \
        libjson-glib-dev \
        wget \
        unzip \
        gstreamer1.0-plugins-good \
        gstreamer1.0-plugins-base \
        gstreamer1.0-plugins-ugly \
        gstreamer1.0-plugins-bad \
        gstreamer1.0-libav 

# This line says to copy everything in the `src` directory 
# (specified when running docker build) into the $container_build_path
# we defined in the argument above to prepare for compile
COPY . $container_build_path

# This line changes to working directory to the location in
# the deepstream samples directory
WORKDIR $container_build_path

# This line actually builds the code in the src directory
# from the deepstream samples subdirectory, using the additional
# deepstream source files contained in the build container.
RUN export CUDA_VER=10.2 && make -f Makefile.ds

# Symlink a `/usr/src/app` directory to the location where
# we built the container, so we have an easier way to reference
# the application
RUN mkdir -p /usr/src/ && \
    ln -s $container_build_path /usr/src/app

# Set this as our default working directory for the container
WORKDIR /usr/src/app

# Set the initScript as our entrypoint for the docker container,
# When running our container we'll start by executing this script.
ENTRYPOINT [ "/usr/src/app/initScript.sh" ]
